"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[966],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(r),h=a,m=u["".concat(p,".").concat(h)]||u[h]||d[h]||o;return r?n.createElement(m,i(i({ref:t},s),{},{components:r})):n.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},4103:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={},i="Service Principal Setup Instructions",l={unversionedId:"PowerShell/Creat A service principal",id:"PowerShell/Creat A service principal",title:"Service Principal Setup Instructions",description:"Series of instructions and Commands to set up Service Principal Application for automated Azure script authentication",source:"@site/docs/PowerShell/Creat A service principal.md",sourceDirName:"PowerShell",slug:"/PowerShell/Creat A service principal",permalink:"/docs/PowerShell/Creat A service principal",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Convert Azure Groups to Active Directory Security Group",permalink:"/docs/PowerShell/Az to Ad"}},p={},c=[{value:"Setup In Portal.Azure.com",id:"setup-in-portalazurecom",level:2},{value:"Start by adding an app registration in Azure portal",id:"start-by-adding-an-app-registration-in-azure-portal",level:3},{value:"Assign the ObjectID from the app to a variable",id:"assign-the-objectid-from-the-app-to-a-variable",level:2},{value:"Add the Tenant to a Script",id:"add-the-tenant-to-a-script",level:2}],s={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"service-principal-setup-instructions"},"Service Principal Setup Instructions"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Series of instructions and Commands to set up Service Principal Application for automated Azure script authentication"),"   "),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"setup-in-portalazurecom"},"Setup In Portal.Azure.com"),(0,a.kt)("h3",{id:"start-by-adding-an-app-registration-in-azure-portal"},"Start by adding an app registration in Azure portal"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"App must be single tenant")),(0,a.kt)("p",null,"Add Mircorsoft Graph API Permission with ",(0,a.kt)("inlineCode",{parentName:"p"},"User.readwrite.All")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Group.ReadWrite.All")),(0,a.kt)("p",null,"Next we will add a signed certificate, you can either generate a self signed cert, instructions here: ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/active-directory/develop/howto-create-self-signed-certificate"},"https://learn.microsoft.com/en-us/azure/active-directory/develop/howto-create-self-signed-certificate"),"\nor in our case, we will use one signed by our local CA. "),(0,a.kt)("p",null,"On the server the script will be running as a scheduled task, open certlm, and under personal certificates, export one of the Client Authentication certs as\nBase-64 encoded x.509, do not export the private key."),(0,a.kt)("p",null," Upload the exported cert to the Certificates & Secrets page of the Azure App you created"),(0,a.kt)("p",null,"Next, in Powershell, connect to Azure AD with your admin account"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"    Connect-AzureAD\n")),(0,a.kt)("p",null," You will add app roles to the service principle app,depending on what the app needs to do, roles found here ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/active-directory/roles/permissions-reference"},"https://learn.microsoft.com/en-us/azure/active-directory/roles/permissions-reference")),(0,a.kt)("p",null,"For this example we will be using Global Administrator"),(0,a.kt)("p",null,"You will also need the objectID of the application you created, which can be found in Overview > Managed Application > ObjectId "),(0,a.kt)("h2",{id:"assign-the-objectid-from-the-app-to-a-variable"},"Assign the ObjectID from the app to a variable"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"$app = <objectId>\n")),(0,a.kt)("p",null,"The following will add the desired roles to your app"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"    Add-AzureADDirectoryRoleMember -ObjectID <ID of the Role> -RefObjectId $app\n")),(0,a.kt)("p",null,"If you don't know the ObjectID of the role you want, it can still be added like this "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},'    Add-AzureADDirectoryRoleMember -ObjectId (Get-AzureADDirectoryRole | where-object {$_.DisplayName -eq "Global Administrator"}).Objectid -RefObjectId $app\n')),(0,a.kt)("h2",{id:"add-the-tenant-to-a-script"},"Add the Tenant to a Script"),(0,a.kt)("p",null,"Your app can now be used to authenticate Azure Ad Scripts. To run a script as this service principle, install the AzureAD module, and connect as the tenant."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"    Install-Module AzureAD\n    import-Module AzureAD\n    Connect-AzureAD -TenantId <tenantId> -ApplicationId  <applicationId> -CertificateThumbprint <thumb>\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"TenantId")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ApplicationId")," are both found on the Overview Page of your application, and you can copy the ",(0,a.kt)("inlineCode",{parentName:"p"},"CertThumb")," from the Certificates & Secrets page"),(0,a.kt)("hr",null))}u.isMDXComponent=!0}}]);